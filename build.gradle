buildscript {
  repositories {
    maven {
      url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
    }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
  }
}

plugins {
  id 'org.jetbrains.intellij' version '0.3.12'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'
apply plugin: "com.google.osdetector"

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

// Setup the native linked SSL lib

def tcnative_classifier = osdetector.classifier;
// Fedora variants use a different soname for OpenSSL than other linux distributions
// (see http://netty.io/wiki/forked-tomcat-native.html).
if (osdetector.os == "linux" && osdetector.release.isLike("fedora")) {
  tcnative_classifier += "-fedora";
}

dependencies {
  compile 'io.netty:netty-tcnative-boringssl-static:2.0.6.Final:' + tcnative_classifier
  // compile 'io.netty:netty-tcnative:2.0.6.Final:' + tcnative_classifier
}

// Set up the IntelliJ plugin building

sourceSets {
  main {
    java.srcDir 'src'
    java.srcDir 'gen'
    proto.srcDir 'proto'
    resources.srcDir 'resources'
  }
  test {
    java.srcDir 'test'
  }
}

intellij {
  version ideaVersion
  pluginName 'SpeechVim'
  updateSinceUntilBuild false
  downloadSources Boolean.valueOf(downloadIdeaSources)
  instrumentCode Boolean.valueOf(instrumentPluginCode)
  intellijRepo = "https://www.jetbrains.com/intellij-repository"

  publishPlugin {
    channels publishChannels.split(',')
    username publishUsername
    password publishPassword
  }
}

repositories {
  mavenCentral()
}

// Configure Protocol Buffers + gRPC
protobuf {
  generatedFilesBaseDir = "$projectDir/gen"
  protoc {
    // The version of protoc must match protobuf-java. If you don't depend on
    // protobuf-java directly, you will be transitively depending on the
    // protobuf-java version that grpc depends on.
    artifact = "com.google.protobuf:protoc:3.4.0"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.7.0'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

// Main dependencies

dependencies {
  // Add Kotlin
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

  // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'

  // https://mvnrepository.com/artifact/io.netty/netty-all
  compile group: 'io.netty', name: 'netty-all', version: '4.1.16.Final'

  compile 'io.grpc:grpc-netty:1.7.0'
  compile (group: 'io.grpc', name: 'grpc-protobuf', version: '1.7.0')
  compile 'io.grpc:grpc-stub:1.7.0'

  // Add the Google speech API, even though it's almost completely broken
  compile 'com.google.cloud:google-cloud-speech:0.30.0-alpha'

  testCompile group: 'junit', name: 'junit', version: '4.12'
}
